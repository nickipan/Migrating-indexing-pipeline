# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Status(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, active: int=None, failed: int=None, succeeded: int=None, terminating: int=None, completed: bool=None, start_time: str=None, completion_time: str=None, last_successful_time: str=None):  # noqa: E501
        """Status - a model defined in Swagger

        :param name: The name of this Status.  # noqa: E501
        :type name: str
        :param active: The active of this Status.  # noqa: E501
        :type active: int
        :param failed: The failed of this Status.  # noqa: E501
        :type failed: int
        :param succeeded: The succeeded of this Status.  # noqa: E501
        :type succeeded: int
        :param terminating: The terminating of this Status.  # noqa: E501
        :type terminating: int
        :param completed: The completed of this Status.  # noqa: E501
        :type completed: bool
        :param start_time: The start_time of this Status.  # noqa: E501
        :type start_time: str
        :param completion_time: The completion_time of this Status.  # noqa: E501
        :type completion_time: str
        :param last_successful_time: The last_successful_time of this Status.  # noqa: E501
        :type last_successful_time: str
        """
        self.swagger_types = {
            'name': str,
            'active': int,
            'failed': int,
            'succeeded': int,
            'terminating': int,
            'completed': bool,
            'start_time': str,
            'completion_time': str,
            'last_successful_time': str
        }

        self.attribute_map = {
            'name': 'name',
            'active': 'active',
            'failed': 'failed',
            'succeeded': 'succeeded',
            'terminating': 'terminating',
            'completed': 'completed',
            'start_time': 'startTime',
            'completion_time': 'completionTime',
            'last_successful_time': 'lastSuccessfulTime'
        }
        self._name = name
        self._active = active
        self._failed = failed
        self._succeeded = succeeded
        self._terminating = terminating
        self._completed = completed
        self._start_time = start_time
        self._completion_time = completion_time
        self._last_successful_time = last_successful_time

    @classmethod
    def from_dict(cls, dikt) -> 'Status':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Status of this Status.  # noqa: E501
        :rtype: Status
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Status.


        :return: The name of this Status.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Status.


        :param name: The name of this Status.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def active(self) -> int:
        """Gets the active of this Status.


        :return: The active of this Status.
        :rtype: int
        """
        return self._active

    @active.setter
    def active(self, active: int):
        """Sets the active of this Status.


        :param active: The active of this Status.
        :type active: int
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def failed(self) -> int:
        """Gets the failed of this Status.


        :return: The failed of this Status.
        :rtype: int
        """
        return self._failed

    @failed.setter
    def failed(self, failed: int):
        """Sets the failed of this Status.


        :param failed: The failed of this Status.
        :type failed: int
        """

        self._failed = failed

    @property
    def succeeded(self) -> int:
        """Gets the succeeded of this Status.


        :return: The succeeded of this Status.
        :rtype: int
        """
        return self._succeeded

    @succeeded.setter
    def succeeded(self, succeeded: int):
        """Sets the succeeded of this Status.


        :param succeeded: The succeeded of this Status.
        :type succeeded: int
        """

        self._succeeded = succeeded

    @property
    def terminating(self) -> int:
        """Gets the terminating of this Status.


        :return: The terminating of this Status.
        :rtype: int
        """
        return self._terminating

    @terminating.setter
    def terminating(self, terminating: int):
        """Sets the terminating of this Status.


        :param terminating: The terminating of this Status.
        :type terminating: int
        """

        self._terminating = terminating

    @property
    def completed(self) -> bool:
        """Gets the completed of this Status.


        :return: The completed of this Status.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed: bool):
        """Sets the completed of this Status.


        :param completed: The completed of this Status.
        :type completed: bool
        """

        self._completed = completed

    @property
    def start_time(self) -> str:
        """Gets the start_time of this Status.


        :return: The start_time of this Status.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this Status.


        :param start_time: The start_time of this Status.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def completion_time(self) -> str:
        """Gets the completion_time of this Status.


        :return: The completion_time of this Status.
        :rtype: str
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time: str):
        """Sets the completion_time of this Status.


        :param completion_time: The completion_time of this Status.
        :type completion_time: str
        """

        self._completion_time = completion_time

    @property
    def last_successful_time(self) -> str:
        """Gets the last_successful_time of this Status.


        :return: The last_successful_time of this Status.
        :rtype: str
        """
        return self._last_successful_time

    @last_successful_time.setter
    def last_successful_time(self, last_successful_time: str):
        """Sets the last_successful_time of this Status.


        :param last_successful_time: The last_successful_time of this Status.
        :type last_successful_time: str
        """

        self._last_successful_time = last_successful_time
