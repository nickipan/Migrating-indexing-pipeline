# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Job(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, source_type: str=None, resource_type: str=None, resource_type_only: bool=None, periodic: bool=None, time_period: str=None):  # noqa: E501
        """Job - a model defined in Swagger

        :param name: The name of this Job.  # noqa: E501
        :type name: str
        :param source_type: The source_type of this Job.  # noqa: E501
        :type source_type: str
        :param resource_type: The resource_type of this Job.  # noqa: E501
        :type resource_type: str
        :param resource_type_only: The resource_type_only of this Job.  # noqa: E501
        :type resource_type_only: bool
        :param periodic: The periodic of this Job.  # noqa: E501
        :type periodic: bool
        :param time_period: The time_period of this Job.  # noqa: E501
        :type time_period: str
        """
        self.swagger_types = {
            'name': str,
            'source_type': str,
            'resource_type': str,
            'resource_type_only': bool,
            'periodic': bool,
            'time_period': str
        }

        self.attribute_map = {
            'name': 'name',
            'source_type': 'sourceType',
            'resource_type': 'resourceType',
            'resource_type_only': 'resourceTypeOnly',
            'periodic': 'periodic',
            'time_period': 'timePeriod'
        }
        self._name = name
        self._source_type = source_type
        self._resource_type = resource_type
        self._resource_type_only = resource_type_only
        self._periodic = periodic
        self._time_period = time_period

    @classmethod
    def from_dict(cls, dikt) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Job of this Job.  # noqa: E501
        :rtype: Job
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Job.


        :return: The name of this Job.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Job.


        :param name: The name of this Job.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def source_type(self) -> str:
        """Gets the source_type of this Job.


        :return: The source_type of this Job.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: str):
        """Sets the source_type of this Job.


        :param source_type: The source_type of this Job.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this Job.


        :return: The resource_type of this Job.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this Job.


        :param resource_type: The resource_type of this Job.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type

    @property
    def resource_type_only(self) -> bool:
        """Gets the resource_type_only of this Job.


        :return: The resource_type_only of this Job.
        :rtype: bool
        """
        return self._resource_type_only

    @resource_type_only.setter
    def resource_type_only(self, resource_type_only: bool):
        """Sets the resource_type_only of this Job.


        :param resource_type_only: The resource_type_only of this Job.
        :type resource_type_only: bool
        """
        if resource_type_only is None:
            raise ValueError("Invalid value for `resource_type_only`, must not be `None`")  # noqa: E501

        self._resource_type_only = resource_type_only

    @property
    def periodic(self) -> bool:
        """Gets the periodic of this Job.


        :return: The periodic of this Job.
        :rtype: bool
        """
        return self._periodic

    @periodic.setter
    def periodic(self, periodic: bool):
        """Sets the periodic of this Job.


        :param periodic: The periodic of this Job.
        :type periodic: bool
        """
        if periodic is None:
            raise ValueError("Invalid value for `periodic`, must not be `None`")  # noqa: E501

        self._periodic = periodic

    @property
    def time_period(self) -> str:
        """Gets the time_period of this Job.


        :return: The time_period of this Job.
        :rtype: str
        """
        return self._time_period

    @time_period.setter
    def time_period(self, time_period: str):
        """Sets the time_period of this Job.


        :param time_period: The time_period of this Job.
        :type time_period: str
        """

        self._time_period = time_period
